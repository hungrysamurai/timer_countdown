{"mappings":"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","sources":["src/js/utils.js","src/js/timer.js","src/js/saveTimer.js","src/js/countdown.js","src/js/script.js"],"sourcesContent":["// Get DOM element\r\nconst getElement = (selection) => {\r\n  const element = document.querySelector(selection);\r\n  if (element) return element;\r\n  throw new Error(\r\n    `Please check \"${selection}\" selector, no such element exist`\r\n  );\r\n};\r\n\r\n// Update timer/countdown digits in DOM\r\nconst updateDOMTimer = (\r\n  { hours = 0, minutes = 0, seconds = 0, milliseconds = 0 } = {},\r\n  digitsObject\r\n) => {\r\n  digitsObject.hoursEl.textContent = getZero(hours);\r\n  digitsObject.minutesEl.textContent = getZero(minutes);\r\n  digitsObject.secondsEl.textContent = getZero(seconds);\r\n  digitsObject.millisecondsEl.textContent = getZero(milliseconds);\r\n};\r\n\r\n// Make 00 instead of 0\r\nconst getZero = (num) => {\r\n  if (num >= 0 && num < 10) {\r\n    return `0${num}`;\r\n  } else {\r\n    return num;\r\n  }\r\n};\r\n\r\n// Convert timestamp in hours:minutes:seconds:milliseconds\r\nconst convertTime = (timeStamp) => {\r\n  const hours = Math.floor(timeStamp / (1000 * 60 * 60));\r\n  const minutes = Math.floor((timeStamp / 1000 / 60) % 60);\r\n  const seconds = Math.floor((timeStamp / 1000) % 60);\r\n  const milliseconds = Math.floor((timeStamp / 10) % 100);\r\n\r\n  return { hours, minutes, seconds, milliseconds };\r\n};\r\n\r\n// Switch modes in DOM\r\nconst transformDOM = (mode, elementsObject) => {\r\n  // Get elements to transform\r\n  const { clockContainer, modeContainer, progressBar, timerButtonsContainer, countdownButtonsContainer } = elementsObject\r\n\r\n  // Change digits colors\r\n  clockContainer.className = `clock-container ${mode} d-flex w-100 h-auto`;\r\n\r\n  // Transform mode container\r\n  modeContainer.className = `mode-container ${mode}`;\r\n\r\n  // Progress bar re-color\r\n  progressBar.className = `progress-bar ${mode}`;\r\n\r\n  // Switch buttons containers\r\n  timerButtonsContainer.classList.remove(\"show\");\r\n  countdownButtonsContainer.classList.remove(\"show\");\r\n\r\n  document.querySelector(`.${mode}-buttons-container`).classList.add(\"show\");\r\n}\r\n\r\nconst updateProgressBar = (el, width) => {\r\n  el.style.width = `${width}%`\r\n}\r\n\r\nconst setInputs = (inputsArray) => {\r\n  // set inputs numeric limitations\r\n  inputsArray.forEach((input) => {\r\n    input.addEventListener(\"input\", () => {\r\n      setUpInput(input);\r\n    });\r\n  });\r\n}\r\n\r\nfunction setUpInput(el) {\r\n  if (el.value != \"\") {\r\n    if (parseInt(el.value) < parseInt(el.min)) {\r\n      el.value = el.min;\r\n    }\r\n    if (parseInt(el.value) > parseInt(el.max)) {\r\n      el.value = el.max;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport { getElement, getZero, convertTime, updateDOMTimer, transformDOM, setInputs, updateProgressBar };\r\n","import { updateDOMTimer, convertTime, updateProgressBar } from \"./utils.js\";\r\n\r\n// Init timer from 00\r\nconst initializeTimer = (timerState, { timerPlayIcon, timerPlayBtn }) => {\r\n  // Set initial timer state object\r\n  timerState = {\r\n    status: \"active\",\r\n    timerProgress: 0,\r\n    initialTimestamp: Date.now(),\r\n  };\r\n\r\n  // Change button\r\n  timerPlayIcon.className = \"bi bi-pause\";\r\n  timerPlayBtn.classList.add(\"active\");\r\n\r\n  return timerState;\r\n};\r\n\r\n// Pause timer\r\nconst freezeTimer = (timerState, { timerPlayIcon }, interval) => {\r\n  // Update status\r\n  timerState.status = \"paused\";\r\n  timerState.timerProgress = Date.now() - timerState.initialTimestamp;\r\n\r\n  // Change DOM\r\n  timerPlayIcon.className = \"bi bi-play\";\r\n\r\n  // Stop Interval\r\n  clearInterval(interval);\r\n\r\n  return timerState;\r\n};\r\n\r\n// Resume Timer\r\nconst unFreezeTimer = (timerState, { timerPlayIcon, timerPlayBtn }) => {\r\n  // Update status\r\n  timerState.status = \"active\";\r\n  timerState.initialTimestamp = Date.now() - timerState.timerProgress;\r\n\r\n  // Change DOM\r\n  timerPlayIcon.className = \"bi bi-pause\";\r\n  timerPlayBtn.classList.add(\"active\");\r\n\r\n  return timerState;\r\n};\r\n\r\n// Reset timer to 00\r\nconst resetTimer = (\r\n  timerState,\r\n  { timerPlayIcon, timerPlayBtn },\r\n  digitsElements,\r\n  interval\r\n) => {\r\n  timerState = undefined;\r\n  clearInterval(interval);\r\n  timerPlayIcon.className = \"bi bi-play\";\r\n  timerPlayBtn.classList.remove(\"active\");\r\n  updateDOMTimer(undefined, digitsElements);\r\n\r\n  return timerState;\r\n};\r\n\r\n// Update timer function\r\nconst timerUpdate = (startTime, digitsElements) => {\r\n  const t = Date.now() - startTime;\r\n  updateDOMTimer(convertTime(t), digitsElements);\r\n};\r\n\r\nexport { initializeTimer, freezeTimer, unFreezeTimer, resetTimer, timerUpdate };\r\n","import { convertTime, getZero } from \"./utils.js\";\r\n\r\nlet savedTimers;\r\n\r\nconst getSavedTimers = ({ savedCloseBtn, savedTimersEl }) => {\r\n  // Check localStorage for saved timers\r\n  if (!localStorage.getItem(\"savedTimers\")) {\r\n    localStorage.setItem(\"savedTimers\", JSON.stringify([]));\r\n  }\r\n\r\n  savedTimers = JSON.parse(localStorage.getItem(\"savedTimers\"));\r\n\r\n  // Retrieve saved timers from localStorage and render them to DOM\r\n  savedTimers.forEach((time, i) => {\r\n    // Add close button to container\r\n    if (i === 0) {\r\n      savedCloseBtn.classList.remove(\"hidden\");\r\n    }\r\n    updateDOMSavedTimers(convertTime(time), savedTimersEl);\r\n  });\r\n};\r\n\r\n// Save timer\r\nconst saveTimer = (timerState, { savedCloseBtn, savedTimersEl }) => {\r\n  let currentTime;\r\n  if (!timerState) return;\r\n\r\n  if (timerState.status === \"active\")\r\n    currentTime = Date.now() - timerState.initialTimestamp;\r\n  else currentTime = timerState.timerProgress;\r\n  console.log(savedTimers);\r\n\r\n  // Set limit to 12 timers\r\n  if (savedTimers.length < 10) {\r\n    savedTimers.push(currentTime);\r\n  } else {\r\n    return;\r\n  }\r\n  if (savedTimers.length === 1) {\r\n    savedCloseBtn.classList.remove(\"hidden\");\r\n  }\r\n\r\n  localStorage.setItem(\"savedTimers\", JSON.stringify(savedTimers));\r\n  updateDOMSavedTimers(convertTime(currentTime), savedTimersEl);\r\n};\r\n\r\n// Reset all saved timers\r\nconst resetSavedTimers = ({ savedCloseBtn, savedTimersEl }) => {\r\n  // Clear DOM\r\n  savedTimersEl.innerHTML = \"\";\r\n\r\n  // Purge savedTimers array\r\n  savedTimers = [];\r\n\r\n  // Purge localStorage\r\n  localStorage.removeItem(\"savedTimers\");\r\n\r\n  // Hide button\r\n  savedCloseBtn.classList.add(\"hidden\");\r\n};\r\n\r\n// Update seved timers container\r\nfunction updateDOMSavedTimers(\r\n  { hours, minutes, seconds, milliseconds },\r\n  savedTimersEl\r\n) {\r\n  const element = document.createElement(\"div\");\r\n  element.className = \"saved-timer m-1\";\r\n  element.innerHTML = `\r\n  <span>\r\n  ${getZero(hours)}:${getZero(minutes)}:${getZero(seconds)}:${getZero(\r\n    milliseconds\r\n  )}\r\n  </span>\r\n  `;\r\n\r\n  savedTimersEl.append(element);\r\n}\r\n\r\nexport { getSavedTimers, saveTimer, resetSavedTimers };\r\n","import { updateDOMTimer, convertTime, updateProgressBar } from \"./utils.js\";\r\n\r\n// Init countdown from 00\r\nconst initializeCountdown = (\r\n  countdownState,\r\n  { inputsArray, countdownPlayIcon, countdownPlayBtn, progressBar }\r\n) => {\r\n  const [hoursInput, minutesInput, secondsInput] = inputsArray;\r\n\r\n  const totalTime =\r\n    secondsInput.value * 1000 +\r\n    minutesInput.value * 60 * 1000 +\r\n    hoursInput.value * 60 * 60 * 1000;\r\n\r\n  if (totalTime === 0 || totalTime >= 359_999_999) return;\r\n\r\n  deActivateInputs(inputsArray, true);\r\n  updateProgressBar(progressBar, 0);\r\n  countdownState = {\r\n    status: \"active\",\r\n    countdownTime: totalTime,\r\n    endTime: Date.now() + totalTime,\r\n    totalTime: totalTime,\r\n  };\r\n\r\n  countdownPlayIcon.className = \"bi bi-pause\";\r\n  countdownPlayBtn.classList.add(\"active\");\r\n\r\n  return countdownState;\r\n};\r\n\r\n// Pause countdown\r\nconst freezeCountdown = (countdownState, interval, { countdownPlayIcon }) => {\r\n  countdownState.status = \"paused\";\r\n  countdownPlayIcon.className = \"bi bi-play\";\r\n\r\n  clearInterval(interval);\r\n\r\n  return countdownState;\r\n};\r\n\r\n// Resume countdown\r\nconst unFreezeCountdown = (countdownState, { countdownPlayIcon }) => {\r\n  countdownState.status = \"active\";\r\n  countdownState.endTime = countdownState.countdownTime + Date.now();\r\n  countdownPlayIcon.className = \"bi bi-pause\";\r\n\r\n  return countdownState;\r\n};\r\n\r\n// Reset countdown to 00\r\nconst resetCountdown = (\r\n  countdownState,\r\n  interval,\r\n  { inputsArray, countdownPlayIcon, countdownPlayBtn },\r\n  digitsElements\r\n) => {\r\n  clearInterval(interval);\r\n  countdownState = undefined;\r\n\r\n  countdownPlayIcon.className = \"bi bi-play\";\r\n  countdownPlayBtn.classList.remove(\"active\");\r\n\r\n  deActivateInputs(inputsArray, false);\r\n\r\n  updateDOMTimer(undefined, digitsElements);\r\n\r\n  inputsArray.forEach((input) => (input.value = \"\"));\r\n\r\n  return countdownState;\r\n};\r\n\r\n// Countdown update function\r\nconst countdownUpdate = (\r\n  countdownState,\r\n  interval,\r\n  countdownElements,\r\n  digitsElements\r\n) => {\r\n  const { endTime } = countdownState;\r\n  const { progressBar } = countdownElements;\r\n\r\n  let t = endTime - Date.now();\r\n  countdownState.countdownTime = t;\r\n\r\n  updateDOMTimer(convertTime(t), digitsElements);\r\n\r\n  const progress = (\r\n    ((countdownState.totalTime - t) / countdownState.totalTime) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  updateProgressBar(progressBar, progress);\r\n  if (countdownState.countdownTime <= 4) {\r\n    countdownState.status = \"done\";\r\n    resetCountdown(countdownState, interval, countdownElements, digitsElements);\r\n  }\r\n};\r\n\r\nfunction deActivateInputs(inputs, mode) {\r\n  inputs.forEach((input) => {\r\n    input.disabled = mode;\r\n    input.style.color = mode ? \"lightgray\" : \"var(--color-dark)\";\r\n  });\r\n}\r\n\r\nexport {\r\n  initializeCountdown,\r\n  freezeCountdown,\r\n  unFreezeCountdown,\r\n  resetCountdown,\r\n  countdownUpdate,\r\n};\r\n","// Import utils\r\nimport {\r\n  getElement,\r\n  transformDOM,\r\n  setInputs,\r\n  updateProgressBar,\r\n} from \"./utils.js\";\r\n\r\n// Import timer functions\r\nimport {\r\n  initializeTimer,\r\n  freezeTimer,\r\n  unFreezeTimer,\r\n  resetTimer,\r\n  timerUpdate,\r\n} from \"./timer.js\";\r\n\r\n// Import save timer functions\r\nimport { getSavedTimers, saveTimer, resetSavedTimers } from \"./saveTimer.js\";\r\n\r\n// Import countdown functions\r\nimport {\r\n  initializeCountdown,\r\n  freezeCountdown,\r\n  unFreezeCountdown,\r\n  resetCountdown,\r\n  countdownUpdate,\r\n} from \"./countdown.js\";\r\n\r\n// Mode switch container\r\nconst modeContainer = getElement(\".mode-container\");\r\nconst modeSwitcher = getElement(\".mode-switcher\");\r\nconst progressBar = getElement(\".progress-bar\");\r\n\r\n// Saved timers elements\r\nconst savedCloseBtn = getElement(\".saved-timers-container button\");\r\nconst savedTimersEl = getElement(\".saved-timers\");\r\n\r\nconst saveTimerElements = {\r\n  savedCloseBtn,\r\n  savedTimersEl,\r\n};\r\n\r\n// Timer elements\r\nconst timerButtonsContainer = getElement(\".timer-buttons-container\");\r\nconst timerPlayBtn = getElement(\".timer-play-btn\");\r\nconst timerPlayIcon = getElement(\".timer-play-btn .bi.bi-play\");\r\nconst timerStopBtn = getElement(\".timer-stop-btn\");\r\nconst saveBtn = getElement(\".save-btn\");\r\nconst savedContainer = getElement(\".saved-timers-container\");\r\n\r\nconst timerElements = {\r\n  timerButtonsContainer,\r\n  timerPlayBtn,\r\n  timerPlayIcon,\r\n  timerStopBtn,\r\n  saveBtn,\r\n  savedContainer,\r\n};\r\n\r\n// Countdown elements\r\nconst countdownButtonsContainer = getElement(\".countdown-buttons-container\");\r\nconst countdownPlayBtn = getElement(\".countdown-play-btn\");\r\nconst countdownPlayIcon = getElement(\".countdown-play-btn .bi.bi-play\");\r\nconst countdownStopBtn = getElement(\".countdown-stop-btn\");\r\nconst hoursInput = getElement(\"#hours-input\");\r\nconst minutesInput = getElement(\"#minutes-input\");\r\nconst secondsInput = getElement(\"#seconds-input\");\r\n\r\nconst inputsArray = [hoursInput, minutesInput, secondsInput];\r\n\r\nconst countdownElements = {\r\n  countdownButtonsContainer,\r\n  countdownPlayBtn,\r\n  countdownPlayIcon,\r\n  countdownStopBtn,\r\n  inputsArray,\r\n  progressBar,\r\n};\r\n\r\n// Timer digits\r\n\r\n// Container\r\nconst clockContainer = getElement(\".clock-container\");\r\n// Digits\r\nconst hoursEl = getElement(\"#hours\");\r\nconst minutesEl = getElement(\"#minutes\");\r\nconst secondsEl = getElement(\"#seconds\");\r\nconst millisecondsEl = getElement(\"#milliseconds\");\r\n\r\nlet digitsElements = { hoursEl, minutesEl, secondsEl, millisecondsEl };\r\n\r\nlet globalInterval;\r\nlet timerState;\r\nlet countdownState;\r\n\r\n// Switch modes\r\nmodeSwitcher.addEventListener(\"click\", (e) => {\r\n  if (e.pointerId === 1 || e.pointerId === 0) return;\r\n\r\n  const currentMode = e.target.id.split(\"-\")[0];\r\n  transformDOM(currentMode, {\r\n    clockContainer,\r\n    modeContainer,\r\n    progressBar,\r\n    timerButtonsContainer,\r\n    countdownButtonsContainer,\r\n  });\r\n\r\n  // Update progress bar\r\n  currentMode === \"timer\"\r\n    ? updateProgressBar(progressBar, 100)\r\n    : updateProgressBar(progressBar, 0);\r\n\r\n  // Reset timer & countdown\r\n  timerState = resetTimer(\r\n    timerState,\r\n    timerElements,\r\n    digitsElements,\r\n    globalInterval\r\n  );\r\n\r\n  countdownState = resetCountdown(\r\n    countdownState,\r\n    globalInterval,\r\n    countdownElements,\r\n    digitsElements\r\n  );\r\n});\r\n\r\n///////////////////////////////////////   TIMER\r\n\r\n// Play/pause\r\ntimerPlayBtn.addEventListener(\"click\", () => {\r\n  if (!timerState) {\r\n    // Initialize timer\r\n    timerState = initializeTimer(timerState, timerElements);\r\n\r\n    // Initialize interval\r\n    globalInterval = setInterval(\r\n      timerUpdate,\r\n      4,\r\n      timerState.initialTimestamp,\r\n      digitsElements\r\n    );\r\n    return;\r\n  }\r\n\r\n  // Pause timer\r\n  if (timerState.status === \"active\") {\r\n    timerState = freezeTimer(timerState, timerElements, globalInterval);\r\n  }\r\n  // Resume timer\r\n  else if (timerState.status === \"paused\") {\r\n    timerState = unFreezeTimer(timerState, timerElements);\r\n\r\n    // Refresh interval\r\n    globalInterval = setInterval(\r\n      timerUpdate,\r\n      4,\r\n      timerState.initialTimestamp,\r\n      digitsElements\r\n    );\r\n  }\r\n});\r\n\r\n// Reset timer\r\ntimerStopBtn.addEventListener(\"click\", () => {\r\n  timerState = resetTimer(\r\n    timerState,\r\n    timerElements,\r\n    digitsElements,\r\n    globalInterval\r\n  );\r\n});\r\n\r\n// Save Timer\r\nsaveBtn.addEventListener(\"click\", () => {\r\n  saveTimer(timerState, saveTimerElements);\r\n});\r\n\r\n// Remove all saved timers\r\nsavedContainer.addEventListener(\"click\", (e) => {\r\n  if (e.target.tagName === \"I\" || e.target.tagName === \"BUTTON\") {\r\n    resetSavedTimers(saveTimerElements);\r\n  }\r\n});\r\n\r\n///////////////////////////////////////   COUNTDOWN\r\n\r\n// Init/Resume countdown\r\ncountdownPlayBtn.addEventListener(\"click\", () => {\r\n  // Initialize countdown\r\n  if (!countdownState || countdownState.status === \"done\") {\r\n    countdownState = initializeCountdown(countdownState, countdownElements);\r\n\r\n    // If inputs empty\r\n    if (!countdownState) return;\r\n\r\n    globalInterval = setInterval(() => {\r\n      countdownUpdate(\r\n        countdownState,\r\n        globalInterval,\r\n        countdownElements,\r\n        digitsElements\r\n      );\r\n    }, 4);\r\n\r\n    return;\r\n  }\r\n  // Pause countdown\r\n  if (countdownState.status === \"active\") {\r\n    countdownState = freezeCountdown(\r\n      countdownState,\r\n      globalInterval,\r\n      countdownElements\r\n    );\r\n  }\r\n  // Resume countdown\r\n  else if (countdownState.status === \"paused\") {\r\n    countdownState = unFreezeCountdown(countdownState, countdownElements);\r\n\r\n    // Refresh interval\r\n    globalInterval = setInterval(() => {\r\n      countdownUpdate(\r\n        countdownState,\r\n        globalInterval,\r\n        countdownElements,\r\n        digitsElements\r\n      );\r\n    }, 4);\r\n  }\r\n});\r\n\r\n// Reset countdown\r\ncountdownStopBtn.addEventListener(\"click\", () => {\r\n  countdownState = resetCountdown(\r\n    countdownState,\r\n    globalInterval,\r\n    countdownElements,\r\n    digitsElements\r\n  );\r\n  updateProgressBar(progressBar, 0);\r\n});\r\n\r\n// Init\r\ngetSavedTimers(saveTimerElements);\r\nsetInputs(inputsArray);\r\n"],"names":["$15bf6a3816abfb50$export$d16800b7e59a8051","selection","element","document","querySelector","Error","$15bf6a3816abfb50$export$a5d9c8beb94d45af","hours","minutes","seconds","milliseconds","digitsObject","hoursEl","textContent","$15bf6a3816abfb50$export$6904811048a20190","minutesEl","secondsEl","millisecondsEl","num","$15bf6a3816abfb50$export$87b70ab12c6637c0","timeStamp","Math","floor","$15bf6a3816abfb50$export$bf97e8bb9a85c4ec","mode","elementsObject","clockContainer","modeContainer","progressBar","timerButtonsContainer","countdownButtonsContainer","className","classList","remove","add","$15bf6a3816abfb50$export$55220155eeb8e52c","el","width","style","$67b5ad8caac4e087$export$b567b0c384dac8f7","timerState","timerPlayIcon","timerPlayBtn","status","timerProgress","initialTimestamp","Date","now","$67b5ad8caac4e087$export$90d547b987f023f","interval","clearInterval","$67b5ad8caac4e087$export$b15dcf588c34cf63","$67b5ad8caac4e087$export$148d61ea341bbff7","digitsElements","undefined","$67b5ad8caac4e087$export$770e39cd31dad3fb","startTime","t","$9ea4fc254a61dc0e$var$savedTimers","$9ea4fc254a61dc0e$export$72e89d2ff0dcdeb8","savedCloseBtn","savedTimersEl","currentTime","console","log","length","push","localStorage","setItem","JSON","stringify","$9ea4fc254a61dc0e$var$updateDOMSavedTimers","$9ea4fc254a61dc0e$export$fef637c31d279ef1","innerHTML","removeItem","createElement","append","$0969d56210e47e20$export$529cf01df8cb8c71","countdownState","inputsArray","countdownPlayIcon","countdownPlayBtn","hoursInput","minutesInput","secondsInput","totalTime","value","$0969d56210e47e20$var$deActivateInputs","countdownTime","endTime","$0969d56210e47e20$export$e909436e6159b10c","$0969d56210e47e20$export$a2819f7d574f0d3c","$0969d56210e47e20$export$fab119899041e0c5","forEach","input","$0969d56210e47e20$export$bff96e7ef0523a51","countdownElements","progress","toFixed","inputs","disabled","color","$66b821ea461d9f2a$var$modeContainer","$66b821ea461d9f2a$var$modeSwitcher","$66b821ea461d9f2a$var$progressBar","$66b821ea461d9f2a$var$saveTimerElements","$66b821ea461d9f2a$var$timerButtonsContainer","$66b821ea461d9f2a$var$timerPlayBtn","$66b821ea461d9f2a$var$timerPlayIcon","$66b821ea461d9f2a$var$timerStopBtn","$66b821ea461d9f2a$var$saveBtn","$66b821ea461d9f2a$var$savedContainer","$66b821ea461d9f2a$var$timerElements","$66b821ea461d9f2a$var$countdownButtonsContainer","$66b821ea461d9f2a$var$countdownPlayBtn","$66b821ea461d9f2a$var$countdownPlayIcon","$66b821ea461d9f2a$var$countdownStopBtn","$66b821ea461d9f2a$var$inputsArray","$66b821ea461d9f2a$var$countdownElements","$66b821ea461d9f2a$var$clockContainer","$66b821ea461d9f2a$var$globalInterval","$66b821ea461d9f2a$var$timerState","$66b821ea461d9f2a$var$countdownState","$66b821ea461d9f2a$var$digitsElements","addEventListener","e","pointerId","currentMode","target","id","split","setInterval","tagName","getItem","parse","time","i","parseInt","min","max"],"version":3,"file":"index.2ec854d8.js.map"}