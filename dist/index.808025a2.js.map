{"mappings":"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","sources":["src/js/utils.js","src/js/timer.js","src/js/saveTimer.js","src/js/countdown.js","src/js/script.js"],"sourcesContent":["/**\r\n * @property {Function} getElement - Get DOM element by providing selector. If no such element - throw new error\r\n * @param {string} selection - selector of element\r\n * @returns {HTMLElement} - DOM element\r\n */\r\nfunction getElement(selection) {\r\n  const element = document.querySelector(selection);\r\n  if (element) return element;\r\n\r\n  throw new Error(\r\n    `Please check \"${selection}\" selector, no such element exist`\r\n  );\r\n}\r\n\r\n/**\r\n * @property {Function} updateDOMTimer - Update timer/countdown digits in DOM\r\n * @param {Object} convertedTimeObject - object with hours, minutes, seconds and milliseconds. By default all values is 0 when called with undefined\r\n * @param {Object} digitsObject - object od DOM elements to update\r\n *\r\n * @returns {void}\r\n */\r\nfunction updateDOMTimer(\r\n  { hours = 0, minutes = 0, seconds = 0, milliseconds = 0 } = {},\r\n  digitsObject\r\n) {\r\n  digitsObject.hoursEl.textContent = getZero(hours);\r\n  digitsObject.minutesEl.textContent = getZero(minutes);\r\n  digitsObject.secondsEl.textContent = getZero(seconds);\r\n  digitsObject.millisecondsEl.textContent = getZero(milliseconds);\r\n}\r\n\r\n/**\r\n * @property {Function} convertTime - Convert timestamp in hours:minutes:seconds:milliseconds\r\n * @param {number} timeStamp - time in ms\r\n * @returns {Object} - object with hours, minutes, seconds and milliseconds.\r\n */\r\nfunction convertTime(timeStamp) {\r\n  const hours = Math.floor(timeStamp / (1000 * 60 * 60));\r\n  const minutes = Math.floor((timeStamp / 1000 / 60) % 60);\r\n  const seconds = Math.floor((timeStamp / 1000) % 60);\r\n  const milliseconds = Math.floor((timeStamp / 10) % 100);\r\n\r\n  return { hours, minutes, seconds, milliseconds };\r\n}\r\n\r\n/**\r\n * @property {Function} getZero - Make 00 instead of 0\r\n * @param {number} num - number\r\n * @returns {string|number}\r\n */\r\nfunction getZero(num) {\r\n  if (num >= 0 && num < 10) {\r\n    return `0${num}`;\r\n  } else {\r\n    return num;\r\n  }\r\n}\r\n\r\n/**\r\n * @property {Function} transformDOM - Switch modes in DOM\r\n * @param {string} mode - countdown or timer mode\r\n * @param {Object} elementsObject - object of DOM elements to change\r\n * @returns {void}\r\n */\r\nconst transformDOM = (mode, elementsObject) => {\r\n  // Get elements to transform\r\n  const {\r\n    clockContainer,\r\n    modeContainer,\r\n    progressBar,\r\n    timerButtonsContainer,\r\n    countdownButtonsContainer,\r\n  } = elementsObject;\r\n\r\n  // Change digits colors\r\n  clockContainer.className = `clock-container ${mode} d-flex w-100 h-auto`;\r\n\r\n  // Transform mode container\r\n  modeContainer.className = `mode-container ${mode}`;\r\n\r\n  // Progress bar re-color\r\n  progressBar.className = `progress-bar ${mode}`;\r\n\r\n  // Switch buttons containers\r\n  timerButtonsContainer.classList.remove(\"show\");\r\n  countdownButtonsContainer.classList.remove(\"show\");\r\n\r\n  document.querySelector(`.${mode}-buttons-container`).classList.add(\"show\");\r\n};\r\n\r\n/**\r\n * @property {Function} updateProgressBar - Change width of progress bar according to countdown progress\r\n * @param {HTMLElement} el - element to change\r\n * @param {number} width\r\n * @returns {void}\r\n */\r\nfunction updateProgressBar(el, width) {\r\n  el.style.width = `${width}%`;\r\n}\r\n\r\n/**\r\n * @property {Function} setInputsLimits - Limit values of input fields\r\n * @param {Array} inputsArray - DOM elements - input fields\r\n * @returns {void}\r\n */\r\nfunction setInputsLimits(inputsArray) {\r\n  inputsArray.forEach((input) => {\r\n    input.addEventListener(\"input\", () => {\r\n      setUpInput(input);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @property {Function} setUpInput - Set value of passed input to min or max\r\n * @param {HTMLElement} el - input element to change\r\n * @returns {void}\r\n */\r\nfunction setUpInput(el) {\r\n  if (el.value != \"\") {\r\n    if (parseInt(el.value) < parseInt(el.min)) {\r\n      el.value = el.min;\r\n    }\r\n    if (parseInt(el.value) > parseInt(el.max)) {\r\n      el.value = el.max;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @property {Function} getTotalTimeFromInputs - Calculate total time to count down\r\n * @param {Array} inputs - DOM elements - input fields\r\n * @returns {number}\r\n */\r\nfunction getTotalTimeFromInputs(inputs) {\r\n  const [hoursInput, minutesInput, secondsInput] = inputs;\r\n\r\n  const totalTime =\r\n    secondsInput.value * 1000 +\r\n    minutesInput.value * 60 * 1000 +\r\n    hoursInput.value * 60 * 60 * 1000;\r\n\r\n  return totalTime;\r\n}\r\n\r\n/**\r\n * @property {Function} deactivateInputs - Activate/deactivate input fields\r\n * @param {Array} inputs - DOM elements - input fields\r\n * @param {boolean} mode\r\n * @returns {void}\r\n */\r\nfunction deactivateInputs(inputs, mode) {\r\n  inputs.forEach((input) => {\r\n    input.disabled = mode;\r\n    input.style.color = mode ? \"lightgray\" : \"var(--color-dark)\";\r\n  });\r\n}\r\n\r\n/**\r\n * @property {Function} reset - Reset all DOM elements to default, clear interval\r\n * @param {number} globalInterval - id of global interval\r\n * @param {Object} timerElements - timer DOM elements\r\n * @param {Object} countdownElements - countdown DOM elements\r\n * @param {Object} digitsElements - timer digits DOM elements\r\n * @param {Array} inputsArray - array of DOM elements - input fields\r\n * @returns {void}\r\n */\r\nfunction reset(\r\n  globalInterval,\r\n  timerElements,\r\n  countdownElements,\r\n  digitsElements,\r\n  inputsArray\r\n) {\r\n  timerElements.timerPlayIcon.className = \"bi bi-play\";\r\n  timerElements.timerPlayBtn.classList.remove(\"active\");\r\n\r\n  countdownElements.countdownPlayIcon.className = \"bi bi-play\";\r\n  countdownElements.countdownPlayBtn.classList.remove(\"active\");\r\n\r\n  clearInterval(globalInterval);\r\n\r\n  updateDOMTimer(undefined, digitsElements);\r\n\r\n  inputsArray.forEach((input) => (input.value = \"\"));\r\n  deactivateInputs(inputsArray, false);\r\n}\r\n\r\nexport {\r\n  getElement,\r\n  getZero,\r\n  convertTime,\r\n  updateDOMTimer,\r\n  transformDOM,\r\n  setInputsLimits,\r\n  updateProgressBar,\r\n  getTotalTimeFromInputs,\r\n  deactivateInputs,\r\n  reset,\r\n};\r\n","import { updateDOMTimer, convertTime } from \"./utils.js\";\r\n\r\n/**\r\n * Class that generates timer state object\r\n */\r\nclass TimerState {\r\n  /**\r\n   *\r\n   * @this TimerState\r\n   */\r\n  constructor() {\r\n    this.status = \"active\";\r\n    this.timerProgress = 0;\r\n    this.initialTimestamp = Date.now();\r\n  }\r\n\r\n  freeze() {\r\n    this.status = \"paused\";\r\n    this.timerProgress = Date.now() - this.initialTimestamp;\r\n  }\r\n\r\n  unFreeze() {\r\n    this.status = \"active\";\r\n    this.initialTimestamp = Date.now() - this.timerProgress;\r\n  }\r\n}\r\n\r\n/**\r\n * @property {Function} timerUpdate - Timer update function\r\n * @param {number} startTime - initial time value\r\n * @param {Object} digitsElements - timer digits DOM elements\r\n * @returns {void}\r\n */\r\nconst timerUpdate = (startTime, digitsElements) => {\r\n  const t = Date.now() - startTime;\r\n  updateDOMTimer(convertTime(t), digitsElements);\r\n};\r\n\r\nexport { TimerState, timerUpdate };\r\n","import { convertTime, getZero } from \"./utils.js\";\r\n\r\n/**\r\n * Array of saved timer values\r\n * @type {Array}\r\n */\r\nlet savedTimers;\r\n\r\n/**\r\n * @property {Function} getSavedTimers - Load saved timers from localStorage\r\n * @param {Object} saveTimerElements - Object of DOM elements that relates to save time functionality\r\n * @returns {void}\r\n */\r\nconst getSavedTimers = ({ savedCloseBtn, savedTimersEl }) => {\r\n  // Check localStorage for saved timers\r\n  if (!localStorage.getItem(\"savedTimers\")) {\r\n    localStorage.setItem(\"savedTimers\", JSON.stringify([]));\r\n  }\r\n\r\n  savedTimers = JSON.parse(localStorage.getItem(\"savedTimers\"));\r\n  console.log(savedTimers);\r\n  // Retrieve saved timers from localStorage and render them to DOM\r\n  savedTimers.forEach((time, i) => {\r\n    // Add close button to container\r\n    if (i === 0) {\r\n      savedCloseBtn.classList.remove(\"hidden\");\r\n    }\r\n    updateDOMSavedTimers(convertTime(time), savedTimersEl);\r\n  });\r\n};\r\n\r\n/**\r\n * @property {Function} saveTimer - Save timer value\r\n * @param {Object} timerState - current timer state object\r\n * @param {Object} saveTimerElements - Object of DOM elements that relates to save time functionality\r\n * @returns {void}\r\n */\r\nconst saveTimer = (timerState, { savedCloseBtn, savedTimersEl }) => {\r\n  let currentTime;\r\n  if (!timerState) return;\r\n\r\n  if (timerState.status === \"active\")\r\n    currentTime = Date.now() - timerState.initialTimestamp;\r\n  else currentTime = timerState.timerProgress;\r\n\r\n  // Set limit to 12 timers\r\n  if (savedTimers.length < 12) {\r\n    if (savedTimers[savedTimers.length - 1] === currentTime) {\r\n      return;\r\n    } else {\r\n      savedTimers.push(currentTime);\r\n    }\r\n  } else {\r\n    return;\r\n  }\r\n  if (savedTimers.length === 1) {\r\n    savedCloseBtn.classList.remove(\"hidden\");\r\n  }\r\n\r\n  localStorage.setItem(\"savedTimers\", JSON.stringify(savedTimers));\r\n  updateDOMSavedTimers(convertTime(currentTime), savedTimersEl);\r\n};\r\n\r\n/**\r\n * @property {Function} resetSavedTimers - Reset all saved timers\r\n * @param {Object} saveTimerElements - Object of DOM elements that relates to save time functionality\r\n * @returns {void}\r\n */\r\nconst resetSavedTimers = ({ savedCloseBtn, savedTimersEl }) => {\r\n  // Clear DOM\r\n  savedTimersEl.innerHTML = \"\";\r\n\r\n  // Purge savedTimers array\r\n  savedTimers = [];\r\n\r\n  // Purge localStorage\r\n  localStorage.removeItem(\"savedTimers\");\r\n\r\n  // Hide button\r\n  savedCloseBtn.classList.add(\"hidden\");\r\n};\r\n\r\n/**\r\n * @property {Function} updateDOMSavedTimers - Add new value to saved timer values\r\n * @param {Object} - Object with hh:mm:ss:mm\r\n * @param {HTMLElement} savedTimersEl - DOM element, container for save timer values\r\n * @returns {void}\r\n */\r\nfunction updateDOMSavedTimers(\r\n  { hours, minutes, seconds, milliseconds },\r\n  savedTimersEl\r\n) {\r\n  const element = document.createElement(\"div\");\r\n  element.className = \"saved-timer m-1\";\r\n  element.innerHTML = `\r\n  <span>\r\n  ${getZero(hours)}:${getZero(minutes)}:${getZero(seconds)}:${getZero(\r\n    milliseconds\r\n  )}\r\n  </span>\r\n  `;\r\n\r\n  savedTimersEl.append(element);\r\n}\r\n\r\nexport { getSavedTimers, saveTimer, resetSavedTimers };\r\n","import {\r\n  updateDOMTimer,\r\n  convertTime,\r\n  updateProgressBar,\r\n  deactivateInputs,\r\n} from \"./utils.js\";\r\n\r\n/**\r\n * Class that generates countdown state object\r\n */\r\nclass CountdownState {\r\n  /**\r\n   *\r\n   * @param {number} totalTime - time in milliseconds\r\n   * @this CountdownState\r\n   */\r\n  constructor(totalTime) {\r\n    this.status = \"active\";\r\n    this.countdownTime = totalTime;\r\n    this.endTime = Date.now() + totalTime;\r\n    this.totalTime = totalTime;\r\n  }\r\n\r\n  freeze() {\r\n    this.status = \"paused\";\r\n  }\r\n\r\n  unFreeze() {\r\n    this.status = \"active\";\r\n    this.endTime = this.countdownTime + Date.now();\r\n  }\r\n}\r\n\r\n/**\r\n * @property {Function} countdownUpdate - Countdown update function\r\n * @param {Object} countdownState - Current countdown state object\r\n * @param {number} interval - current global interval id\r\n * @param {Object} countdownElements - countdown DOM elements\r\n * @param {Object} digitsElements - timer digits DOM elements\r\n * @param {Array} inputsArray - array of DOM elements - input fields\r\n * @returns {void}\r\n */\r\nconst countdownUpdate = (\r\n  countdownState,\r\n  interval,\r\n  countdownElements,\r\n  digitsElements,\r\n  inputsArray\r\n) => {\r\n  const { endTime } = countdownState;\r\n  const { progressBar } = countdownElements;\r\n\r\n  let t = endTime - Date.now();\r\n  countdownState.countdownTime = t;\r\n\r\n  updateDOMTimer(convertTime(t), digitsElements);\r\n\r\n  const progress = (\r\n    ((countdownState.totalTime - t) / countdownState.totalTime) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  updateProgressBar(progressBar, progress);\r\n\r\n  if (countdownState.countdownTime <= 4) {\r\n    countdownState.status = \"done\";\r\n\r\n    countdownElements.countdownPlayIcon.className = \"bi bi-play\";\r\n    countdownElements.countdownPlayBtn.classList.remove(\"active\");\r\n\r\n    clearInterval(interval);\r\n\r\n    updateDOMTimer(undefined, digitsElements);\r\n\r\n    inputsArray.forEach((input) => (input.value = \"\"));\r\n    deactivateInputs(inputsArray, false);\r\n  }\r\n};\r\n\r\nexport { CountdownState, countdownUpdate };\r\n","// Import utils\r\nimport {\r\n  getElement,\r\n  transformDOM,\r\n  setInputsLimits,\r\n  updateProgressBar,\r\n  getTotalTimeFromInputs,\r\n  deactivateInputs,\r\n  reset,\r\n} from \"./utils\";\r\n\r\n// Import timer functions\r\nimport { TimerState, timerUpdate } from \"./timer\";\r\n\r\n// Import save timer functions\r\nimport { getSavedTimers, saveTimer, resetSavedTimers } from \"./saveTimer\";\r\n\r\n// Import countdown functions\r\nimport { CountdownState, countdownUpdate } from \"./countdown\";\r\n\r\n// Mode switch container\r\nconst modeContainer = getElement(\".mode-container\");\r\nconst modeSwitcher = getElement(\".mode-switcher\");\r\nconst progressBar = getElement(\".progress-bar\");\r\nconst modeLabels = modeSwitcher.querySelectorAll(\".mode-switcher label\");\r\n\r\n// Saved timers elements\r\nconst savedCloseBtn = getElement(\".saved-timers-container button\");\r\nconst savedTimersEl = getElement(\".saved-timers\");\r\n\r\n/**\r\n * Object of DOM elements that relates to save time functionality\r\n * @type {Object}\r\n */\r\nconst saveTimerElements = {\r\n  savedCloseBtn,\r\n  savedTimersEl,\r\n};\r\n\r\n// Timer elements\r\nconst timerButtonsContainer = getElement(\".timer-buttons-container\");\r\nconst timerPlayBtn = getElement(\".timer-play-btn\");\r\nconst timerPlayIcon = getElement(\".timer-play-btn .bi.bi-play\");\r\nconst timerStopBtn = getElement(\".timer-stop-btn\");\r\nconst saveBtn = getElement(\".save-btn\");\r\nconst savedContainer = getElement(\".saved-timers-container\");\r\n\r\n/**\r\n * Object of DOM elements related to timer functionality\r\n * @type {Object}\r\n */\r\nconst timerElements = {\r\n  timerButtonsContainer,\r\n  timerPlayBtn,\r\n  timerPlayIcon,\r\n  timerStopBtn,\r\n  saveBtn,\r\n  savedContainer,\r\n};\r\n\r\n// Countdown elements\r\nconst countdownButtonsContainer = getElement(\".countdown-buttons-container\");\r\nconst countdownPlayBtn = getElement(\".countdown-play-btn\");\r\nconst countdownPlayIcon = getElement(\".countdown-play-btn .bi.bi-play\");\r\nconst countdownStopBtn = getElement(\".countdown-stop-btn\");\r\nconst hoursInput = getElement(\"#hours-input\");\r\nconst minutesInput = getElement(\"#minutes-input\");\r\nconst secondsInput = getElement(\"#seconds-input\");\r\n\r\n/**\r\n * Array of DOM elements - input fields for hours, minutes as=nd seconds for countdown\r\n * @type {Array}\r\n */\r\nconst inputsArray = [hoursInput, minutesInput, secondsInput];\r\n\r\n/**\r\n * Object of DOM elements related to countdown functionality\r\n * @type {Object}\r\n */\r\nconst countdownElements = {\r\n  countdownButtonsContainer,\r\n  countdownPlayBtn,\r\n  countdownPlayIcon,\r\n  countdownStopBtn,\r\n  inputsArray,\r\n  progressBar,\r\n};\r\n\r\n// Timer digits\r\n\r\n// Container\r\nconst clockContainer = getElement(\".clock-container\");\r\n\r\n// Digits\r\nconst hoursEl = getElement(\"#hours\");\r\nconst minutesEl = getElement(\"#minutes\");\r\nconst secondsEl = getElement(\"#seconds\");\r\nconst millisecondsEl = getElement(\"#milliseconds\");\r\n\r\n/**\r\n * Object of DOM elements - digits of timer/countdown\r\n * @type {Object}\r\n */\r\nlet digitsElements = { hoursEl, minutesEl, secondsEl, millisecondsEl };\r\n\r\n/**\r\n * Current interval id\r\n * @type {number}\r\n */\r\nlet globalInterval;\r\n\r\n/**\r\n * Current timer state object\r\n * @type {Object}\r\n */\r\nlet timerState;\r\n\r\n/**\r\n * Current countdown state object\r\n * @type {Object}\r\n */\r\nlet countdownState;\r\n\r\n// Switch modes\r\nmodeLabels.forEach((label) => {\r\n  label.addEventListener(\"click\", (e) => {\r\n    const currentMode = e.target.id.split(\"-\")[0];\r\n\r\n    transformDOM(currentMode, {\r\n      clockContainer,\r\n      modeContainer,\r\n      progressBar,\r\n      timerButtonsContainer,\r\n      countdownButtonsContainer,\r\n    });\r\n\r\n    // Update progress bar\r\n    currentMode === \"timer\"\r\n      ? updateProgressBar(progressBar, 100)\r\n      : updateProgressBar(progressBar, 0);\r\n\r\n    reset(\r\n      globalInterval,\r\n      timerElements,\r\n      countdownElements,\r\n      digitsElements,\r\n      inputsArray\r\n    );\r\n\r\n    timerState = null;\r\n    countdownState = null;\r\n  });\r\n});\r\n\r\n///////////////////////////////////////   TIMER\r\n\r\n// Play/pause\r\ntimerPlayBtn.addEventListener(\"click\", () => {\r\n  if (!timerState) {\r\n    timerPlayIcon.className = \"bi bi-pause\";\r\n    timerPlayBtn.classList.add(\"active\");\r\n\r\n    timerState = new TimerState();\r\n\r\n    // Initialize interval\r\n    globalInterval = setInterval(\r\n      timerUpdate,\r\n      4,\r\n      timerState.initialTimestamp,\r\n      digitsElements\r\n    );\r\n\r\n    return;\r\n  }\r\n\r\n  // Pause timer\r\n  if (timerState.status === \"active\") {\r\n    timerState.freeze();\r\n    timerPlayIcon.className = \"bi bi-play\";\r\n    clearInterval(globalInterval);\r\n  }\r\n\r\n  // Resume timer\r\n  else if (timerState.status === \"paused\") {\r\n    timerState.unFreeze();\r\n\r\n    timerPlayIcon.className = \"bi bi-pause\";\r\n    timerPlayBtn.classList.add(\"active\");\r\n\r\n    globalInterval = setInterval(\r\n      timerUpdate,\r\n      4,\r\n      timerState.initialTimestamp,\r\n      digitsElements\r\n    );\r\n  }\r\n});\r\n\r\n// Reset timer\r\ntimerStopBtn.addEventListener(\"click\", () => {\r\n  reset(\r\n    globalInterval,\r\n    timerElements,\r\n    countdownElements,\r\n    digitsElements,\r\n    inputsArray\r\n  );\r\n  timerState = null;\r\n});\r\n\r\n// Save Timer\r\nsaveBtn.addEventListener(\"click\", () => {\r\n  saveTimer(timerState, saveTimerElements);\r\n});\r\n\r\n// Remove all saved timers\r\nsavedContainer.addEventListener(\"click\", (e) => {\r\n  if (e.target.tagName === \"I\" || e.target.tagName === \"BUTTON\") {\r\n    resetSavedTimers(saveTimerElements);\r\n  }\r\n});\r\n\r\n///////////////////////////////////////   COUNTDOWN\r\n\r\n// Init/Resume countdown\r\ncountdownPlayBtn.addEventListener(\"click\", () => {\r\n  // Initialize countdown\r\n  if (!countdownState || countdownState.status === \"done\") {\r\n    const totalTimeFromInputs = getTotalTimeFromInputs(inputsArray);\r\n\r\n    if (totalTimeFromInputs === 0 || totalTimeFromInputs >= 359_999_999) return;\r\n\r\n    deactivateInputs(inputsArray, true);\r\n    updateProgressBar(progressBar, 0);\r\n\r\n    countdownState = new CountdownState(totalTimeFromInputs);\r\n\r\n    countdownPlayIcon.className = \"bi bi-pause\";\r\n    countdownPlayBtn.classList.add(\"active\");\r\n\r\n    globalInterval = setInterval(() => {\r\n      countdownUpdate(\r\n        countdownState,\r\n        globalInterval,\r\n        countdownElements,\r\n        digitsElements,\r\n        inputsArray\r\n      );\r\n    }, 4);\r\n\r\n    return;\r\n  }\r\n\r\n  // Pause countdown\r\n  if (countdownState.status === \"active\") {\r\n    countdownState.freeze();\r\n    countdownPlayIcon.className = \"bi bi-play\";\r\n    // Clear interval\r\n    clearInterval(globalInterval);\r\n  }\r\n  // Resume countdown\r\n  else if (countdownState.status === \"paused\") {\r\n    countdownState.unFreeze();\r\n    countdownPlayIcon.className = \"bi bi-pause\";\r\n\r\n    // Refresh interval\r\n    globalInterval = setInterval(() => {\r\n      countdownUpdate(\r\n        countdownState,\r\n        globalInterval,\r\n        countdownElements,\r\n        digitsElements\r\n      );\r\n    }, 4);\r\n  }\r\n});\r\n\r\n// Reset countdown\r\ncountdownStopBtn.addEventListener(\"click\", () => {\r\n  reset(\r\n    globalInterval,\r\n    timerElements,\r\n    countdownElements,\r\n    digitsElements,\r\n    inputsArray\r\n  );\r\n\r\n  countdownState = null;\r\n\r\n  updateProgressBar(progressBar, 0);\r\n});\r\n\r\n// Init\r\ngetSavedTimers(saveTimerElements);\r\nsetInputsLimits(inputsArray);\r\n"],"names":["$15bf6a3816abfb50$export$d16800b7e59a8051","selection","element","document","querySelector","Error","$15bf6a3816abfb50$export$a5d9c8beb94d45af","hours","minutes","seconds","milliseconds","digitsObject","hoursEl","textContent","$15bf6a3816abfb50$export$6904811048a20190","minutesEl","secondsEl","millisecondsEl","$15bf6a3816abfb50$export$87b70ab12c6637c0","timeStamp","Math","floor","num","$15bf6a3816abfb50$export$bf97e8bb9a85c4ec","mode","elementsObject","clockContainer","modeContainer","progressBar","timerButtonsContainer","countdownButtonsContainer","className","classList","remove","add","$15bf6a3816abfb50$export$55220155eeb8e52c","el","width","style","$15bf6a3816abfb50$export$160f094266a31cee","inputs","hoursInput","minutesInput","secondsInput","value","$15bf6a3816abfb50$export$8cfbe4f344f471a","forEach","input","disabled","color","$15bf6a3816abfb50$export$aad8462122ac592b","globalInterval","timerElements","countdownElements","digitsElements","inputsArray","timerPlayIcon","timerPlayBtn","countdownPlayIcon","countdownPlayBtn","clearInterval","undefined","$67b5ad8caac4e087$export$d79da05e6e8c1545","freeze","this","status","timerProgress","Date","now","initialTimestamp","unFreeze","constructor","$67b5ad8caac4e087$export$770e39cd31dad3fb","startTime","$9ea4fc254a61dc0e$var$savedTimers","$9ea4fc254a61dc0e$export$72e89d2ff0dcdeb8","timerState","savedCloseBtn","savedTimersEl","currentTime","length","push","localStorage","setItem","JSON","stringify","$9ea4fc254a61dc0e$var$updateDOMSavedTimers","$9ea4fc254a61dc0e$export$fef637c31d279ef1","innerHTML","removeItem","createElement","append","$0969d56210e47e20$export$4329f5b5ab360cf0","endTime","countdownTime","totalTime","$0969d56210e47e20$export$bff96e7ef0523a51","countdownState","interval","t","toFixed","$66b821ea461d9f2a$var$modeContainer","$66b821ea461d9f2a$var$modeSwitcher","$66b821ea461d9f2a$var$progressBar","$66b821ea461d9f2a$var$modeLabels","querySelectorAll","$66b821ea461d9f2a$var$saveTimerElements","$66b821ea461d9f2a$var$timerButtonsContainer","$66b821ea461d9f2a$var$timerPlayBtn","$66b821ea461d9f2a$var$timerPlayIcon","$66b821ea461d9f2a$var$timerStopBtn","$66b821ea461d9f2a$var$saveBtn","$66b821ea461d9f2a$var$savedContainer","$66b821ea461d9f2a$var$timerElements","$66b821ea461d9f2a$var$countdownButtonsContainer","$66b821ea461d9f2a$var$countdownPlayBtn","$66b821ea461d9f2a$var$countdownPlayIcon","$66b821ea461d9f2a$var$countdownStopBtn","$66b821ea461d9f2a$var$inputsArray","$66b821ea461d9f2a$var$countdownElements","$66b821ea461d9f2a$var$clockContainer","$66b821ea461d9f2a$var$globalInterval","$66b821ea461d9f2a$var$timerState","$66b821ea461d9f2a$var$countdownState","$66b821ea461d9f2a$var$digitsElements","label","addEventListener","e","currentMode","target","id","split","setInterval","tagName","totalTimeFromInputs","getItem","parse","console","log","time","i","parseInt","min","max"],"version":3,"file":"index.808025a2.js.map"}